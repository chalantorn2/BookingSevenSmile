import supabase from "../config/supabaseClient";

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°
 * @param {string} category - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param {string} value - ‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param {number} excludeId - ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
 * @returns {Promise<{exists: boolean, existingRecord: Object|null, error: string|null}>}
 */
export const checkDuplicateValue = async (
  category,
  value,
  excludeId = null
) => {
  try {
    console.log(
      `üîç Checking duplicate for category: ${category}, value: "${value}"`
    );

    if (!category || !value?.trim()) {
      return { exists: false, existingRecord: null, error: null };
    }

    // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ normalize ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    const normalizedValue = value.trim();

    let query = supabase
      .from("information")
      .select("*")
      .eq("category", category)
      .eq("active", true);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö case-insensitive
    query = query.ilike("value", normalizedValue);

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ excludeId ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô record ‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
    if (excludeId) {
      query = query.neq("id", excludeId);
    }

    const { data, error } = await query;

    if (error) {
      console.error("‚ùå Error checking duplicate:", error);
      throw new Error(`Database error: ${error.message}`);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const exactMatch = data?.find(
      (record) =>
        record.value.toLowerCase().trim() === normalizedValue.toLowerCase()
    );

    if (exactMatch) {
      console.log("‚ö†Ô∏è Duplicate found:", exactMatch);
      return {
        exists: true,
        existingRecord: exactMatch,
        error: null,
      };
    }

    console.log("‚úÖ No duplicate found");
    return { exists: false, existingRecord: null, error: null };
  } catch (error) {
    console.error("üí• Exception in checkDuplicateValue:", error);
    return { exists: false, existingRecord: null, error: error.message };
  }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á information
 * @returns {Promise<{data: Array, error: Object|null}>}
 */
export const fetchAllInformation = async () => {
  try {
    console.log("üîç Fetching all information...");

    const { data, error } = await supabase
      .from("information")
      .select("*")
      .order("category")
      .order("value");

    if (error) {
      console.error("‚ùå Error fetching all information:", error);
      throw new Error(`Failed to fetch all information: ${error.message}`);
    }

    console.log(
      "‚úÖ Successfully fetched all information:",
      data?.length,
      "records"
    );
    return { data: data || [], error: null };
  } catch (error) {
    console.error("üí• Exception in fetchAllInformation:", error);
    return { data: [], error: error.message };
  }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° category
 * @param {string} category - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @returns {Promise<{data: Array, error: Object|null}>}
 */
export const fetchInformationByCategory = async (category) => {
  try {
    console.log(`üîç Fetching information for category: ${category}`);

    if (!category) {
      throw new Error("Category is required");
    }

    const { data, error } = await supabase
      .from("information")
      .select("*")
      .eq("category", category)
      .eq("active", true)
      .order("value");

    if (error) {
      console.error(`‚ùå Error fetching ${category} information:`, error);
      throw new Error(
        `Failed to fetch ${category} information: ${error.message}`
      );
    }

    console.log(
      `‚úÖ Successfully fetched ${category} information:`,
      data?.length,
      "records"
    );
    return { data: data || [], error: null };
  } catch (error) {
    console.error(
      `üí• Exception in fetchInformationByCategory for ${category}:`,
      error
    );
    return { data: [], error: error.message };
  }
};

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
 * @param {Object} informationData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
 * @returns {Promise<{data: Object|null, error: Object|null}>}
 */
export const addInformation = async (informationData) => {
  try {
    console.log("üîç Adding new information:", informationData);

    // Validate required fields
    if (!informationData.category) {
      throw new Error("Category is required");
    }
    if (!informationData.value || !informationData.value.trim()) {
      throw new Error("Value is required");
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô
    const duplicateCheck = await checkDuplicateValue(
      informationData.category,
      informationData.value
    );

    if (duplicateCheck.error) {
      throw new Error(`Duplicate check failed: ${duplicateCheck.error}`);
    }

    if (duplicateCheck.exists) {
      throw new Error(
        `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "${informationData.value}" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${informationData.category}"`
      );
    }

    // Prepare data for insertion
    const dataToInsert = {
      category: informationData.category.trim(),
      value: informationData.value.trim(),
      description: informationData.description?.trim() || "",
      phone: informationData.phone?.trim() || "",
      active: informationData.active !== false, // default to true
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };

    console.log("üìù Data to insert:", dataToInsert);

    const { data, error } = await supabase
      .from("information")
      .insert(dataToInsert)
      .select()
      .single();

    if (error) {
      console.error("‚ùå Database error while adding information:", error);

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
      if (error.code === "23505") {
        // Unique constraint violation
        throw new Error(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "${informationData.value}" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß`);
      }

      throw new Error(`Database error: ${error.message}`);
    }

    if (!data) {
      console.error("‚ùå No data returned after insert");
      throw new Error("No data returned from database after insert");
    }

    console.log("‚úÖ Successfully added information:", data);
    return { data, error: null };
  } catch (error) {
    console.error("üí• Exception in addInformation:", error);
    return { data: null, error: error.message };
  }
};

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
 * @param {number} id - ID ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param {Object} updatedData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 * @returns {Promise<{success: boolean, data: Object|null, error: Object|null}>}
 */
export const updateInformation = async (id, updatedData) => {
  try {
    console.log(`üîç Updating information ID ${id}:`, updatedData);

    // Validate ID
    if (!id) {
      throw new Error("ID is required for update");
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô value ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
    if (updatedData.value) {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
      const { data: currentData, error: fetchError } = await supabase
        .from("information")
        .select("category, value")
        .eq("id", id)
        .single();

      if (fetchError) {
        throw new Error(`Failed to fetch current data: ${fetchError.message}`);
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ value ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (currentData.value.trim() !== updatedData.value.trim()) {
        const duplicateCheck = await checkDuplicateValue(
          currentData.category,
          updatedData.value,
          id // ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô record ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        );

        if (duplicateCheck.error) {
          throw new Error(`Duplicate check failed: ${duplicateCheck.error}`);
        }

        if (duplicateCheck.exists) {
          throw new Error(
            `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "${updatedData.value}" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${currentData.category}"`
          );
        }
      }
    }

    // Prepare data for update
    const dataToUpdate = {
      ...updatedData,
      updated_at: new Date().toISOString(),
    };

    // Trim string values
    if (dataToUpdate.value) {
      dataToUpdate.value = dataToUpdate.value.trim();
    }
    if (dataToUpdate.description) {
      dataToUpdate.description = dataToUpdate.description.trim();
    }
    if (dataToUpdate.phone) {
      dataToUpdate.phone = dataToUpdate.phone.trim();
    }

    // Remove undefined values
    Object.keys(dataToUpdate).forEach((key) => {
      if (dataToUpdate[key] === undefined) {
        delete dataToUpdate[key];
      }
    });

    console.log("üìù Data to update:", dataToUpdate);

    const { data, error } = await supabase
      .from("information")
      .update(dataToUpdate)
      .eq("id", id)
      .select()
      .single();

    if (error) {
      console.error(
        `‚ùå Database error while updating information ID ${id}:`,
        error
      );

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
      if (error.code === "23505") {
        // Unique constraint violation
        throw new Error(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "${updatedData.value}" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß`);
      }

      throw new Error(`Database error: ${error.message}`);
    }

    console.log(`‚úÖ Successfully updated information ID ${id}:`, data);
    return { success: true, data, error: null };
  } catch (error) {
    console.error(`üí• Exception in updateInformation for ID ${id}:`, error);
    return { success: false, data: null, error: error.message };
  }
};

/**
 * ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (soft delete ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ active = false)
 * @param {number} id - ID ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @returns {Promise<{success: boolean, error: Object|null}>}
 */
export const deactivateInformation = async (id) => {
  try {
    console.log(`üîç Deactivating information ID ${id}`);

    // Validate ID
    if (!id) {
      throw new Error("ID is required for deactivation");
    }

    const { data, error } = await supabase
      .from("information")
      .update({
        active: false,
        updated_at: new Date().toISOString(),
      })
      .eq("id", id)
      .select()
      .single();

    if (error) {
      console.error(
        `‚ùå Database error while deactivating information ID ${id}:`,
        error
      );
      throw new Error(`Database error: ${error.message}`);
    }

    console.log(`‚úÖ Successfully deactivated information ID ${id}:`, data);
    return { success: true, error: null };
  } catch (error) {
    console.error(`üí• Exception in deactivateInformation for ID ${id}:`, error);
    return { success: false, error: error.message };
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @returns {Promise<{success: boolean, error: string|null}>}
 */
export const testDatabaseConnection = async () => {
  try {
    console.log("üîç Testing database connection...");

    const { data, error } = await supabase
      .from("information")
      .select("count(*)")
      .limit(1);

    if (error) {
      console.error("‚ùå Database connection test failed:", error);
      throw new Error(`Database connection test failed: ${error.message}`);
    }

    console.log("‚úÖ Database connection test successful");
    return { success: true, error: null };
  } catch (error) {
    console.error("üí• Database connection test exception:", error);
    return { success: false, error: error.message };
  }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° category ‡∏û‡∏£‡πâ‡∏≠‡∏° search ‡πÅ‡∏•‡∏∞ pagination
 * @param {string} category - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param {string} searchQuery - ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
 * @param {number} page - ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1)
 * @param {number} limit - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
 * @returns {Promise<{data: Array, total: number, totalPages: number, error: Object|null}>}
 */
export const searchInformationByCategory = async (
  category,
  searchQuery = "",
  page = 1,
  limit = 10
) => {
  try {
    console.log(
      `üîç Searching ${category} - Query: "${searchQuery}", Page: ${page}, Limit: ${limit}`
    );

    if (!category) {
      throw new Error("Category is required");
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á query ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    let query = supabase
      .from("information")
      .select("*", { count: "exact" })
      .eq("category", category)
      .eq("active", true);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    if (searchQuery.trim()) {
      query = query.or(
        `value.ilike.%${searchQuery}%,description.ilike.%${searchQuery}%,phone.ilike.%${searchQuery}%`
      );
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì offset ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination
    const offset = (page - 1) * limit;

    // Execute query ‡∏û‡∏£‡πâ‡∏≠‡∏° pagination
    const { data, error, count } = await query
      .order("value")
      .range(offset, offset + limit - 1);

    if (error) {
      console.error(`‚ùå Error searching ${category}:`, error);
      throw new Error(`Failed to search ${category}: ${error.message}`);
    }

    const totalPages = Math.ceil(count / limit);

    console.log(
      `‚úÖ Found ${count} total records, showing page ${page}/${totalPages}`
    );

    return {
      data: data || [],
      total: count || 0,
      totalPages,
      error: null,
    };
  } catch (error) {
    console.error(`üí• Exception in searchInformationByCategory:`, error);
    return {
      data: [],
      total: 0,
      totalPages: 0,
      error: error.message,
    };
  }
};

/**
 * ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
 * @param {string} category - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @returns {Promise<{data: Array, error: string|null}>}
 */
export const findPotentialDuplicates = async (category) => {
  try {
    console.log(`üîç Finding potential duplicates for category: ${category}`);

    const { data, error } = await supabase
      .from("information")
      .select("*")
      .eq("category", category)
      .eq("active", true)
      .order("value");

    if (error) throw error;

    // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô (similar strings)
    const potentialDuplicates = [];
    const processed = new Set();

    for (let i = 0; i < data.length; i++) {
      if (processed.has(data[i].id)) continue;

      const group = [data[i]];
      const normalized1 = data[i].value.toLowerCase().trim();

      for (let j = i + 1; j < data.length; j++) {
        if (processed.has(data[j].id)) continue;

        const normalized2 = data[j].value.toLowerCase().trim();

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô
        if (
          normalized1 === normalized2 || // ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
          normalized1.includes(normalized2) || // ‡∏≠‡∏±‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏ß‡∏°‡∏≠‡∏µ‡∏Å‡∏≠‡∏±‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á
          normalized2.includes(normalized1) ||
          levenshteinDistance(normalized1, normalized2) <= 2 // ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô
        ) {
          group.push(data[j]);
          processed.add(data[j].id);
        }
      }

      if (group.length > 1) {
        potentialDuplicates.push(group);
      }
      processed.add(data[i].id);
    }

    return { data: potentialDuplicates, error: null };
  } catch (error) {
    console.error("Error finding potential duplicates:", error);
    return { data: [], error: error.message };
  }
};

// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Levenshtein distance
function levenshteinDistance(str1, str2) {
  const matrix = [];

  for (let i = 0; i <= str2.length; i++) {
    matrix[i] = [i];
  }

  for (let j = 0; j <= str1.length; j++) {
    matrix[0][j] = j;
  }

  for (let i = 1; i <= str2.length; i++) {
    for (let j = 1; j <= str1.length; j++) {
      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1,
          matrix[i][j - 1] + 1,
          matrix[i - 1][j] + 1
        );
      }
    }
  }

  return matrix[str2.length][str1.length];
}
