// src/hooks/useCapture.js
import { useState, useRef, useEffect } from "react";
import { useNotification } from "./useNotification";
import {
  captureToImage,
  captureToClipboard,
  captureToDataURL,
  captureWithOptions,
} from "../services/captureService";

/**
 * Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡πÉ‡∏î‡πÜ
 * ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Font Loading ‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
 */
const useCapture = (options = {}) => {
  const { showSuccess, showError, showInfo } = useNotification();
  const [isCapturing, setIsCapturing] = useState(false);
  const [previewUrl, setPreviewUrl] = useState(null);
  const [lastCaptureResult, setLastCaptureResult] = useState(null);
  const captureRef = useRef(null);
  const [fontsLoaded, setFontsLoaded] = useState(false);
  const [fontLoadAttempts, setFontLoadAttempts] = useState(0);

  // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î Font
  useEffect(() => {
    const loadFontsWithRetry = async (attempt = 1) => {
      console.log(`üîç Font loading attempt ${attempt}...`);

      try {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° font link ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        if (!document.getElementById("kanit-font")) {
          console.log("üì• Adding Kanit font link...");
          const link = document.createElement("link");
          link.id = "kanit-font";
          link.rel = "stylesheet";
          link.href =
            "https://fonts.googleapis.com/css2?family=Kanit:wght@400;700&display=swap";
          document.head.appendChild(link);
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° preload hints
        if (!document.getElementById("kanit-preload-400")) {
          console.log("üöÄ Adding font preload hints...");
          const preload400 = document.createElement("link");
          preload400.id = "kanit-preload-400";
          preload400.rel = "preload";
          preload400.as = "font";
          preload400.type = "font/woff2";
          preload400.href =
            "https://fonts.gstatic.com/s/kanit/v12/nKKZ-Go6G5tXcraVGwCKd6xBDFs.woff2";
          preload400.crossOrigin = "anonymous";
          document.head.appendChild(preload400);

          const preload700 = document.createElement("link");
          preload700.id = "kanit-preload-700";
          preload700.rel = "preload";
          preload700.as = "font";
          preload700.type = "font/woff2";
          preload700.href =
            "https://fonts.gstatic.com/s/kanit/v12/nKKb-Go6G5tXcraVOyMuVrHaP3KGFw.woff2";
          preload700.crossOrigin = "anonymous";
          document.head.appendChild(preload700);
        }

        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ DOM ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
        await new Promise((resolve) => setTimeout(resolve, 100));

        // ‡∏•‡∏≠‡∏á force load font
        if (document.fonts && document.fonts.load) {
          console.log("‚è≥ Force loading fonts...");
          await Promise.all([
            document.fonts.load("400 16px 'Kanit'"),
            document.fonts.load("700 16px 'Kanit'"),
            document.fonts.load("400 12px 'Kanit'"),
            document.fonts.load("700 12px 'Kanit'"),
          ]);
        }

        // ‡∏£‡∏≠ document.fonts.ready
        if (document.fonts && document.fonts.ready) {
          console.log("‚è≥ Waiting for document.fonts.ready...");
          await Promise.race([
            document.fonts.ready,
            new Promise((resolve) => setTimeout(resolve, 3000)),
          ]);
        } else {
          // Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤
          await new Promise((resolve) => setTimeout(resolve, 2000));
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        let isFontLoaded = false;
        if (document.fonts && document.fonts.check) {
          isFontLoaded =
            document.fonts.check("400 16px 'Kanit'") &&
            document.fonts.check("700 16px 'Kanit'");
          console.log(`üìä Font check result: ${isFontLoaded}`);
        }

        if (isFontLoaded || attempt >= 3) {
          // ‡∏ñ‡πâ‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
          console.log(
            isFontLoaded
              ? "‚úÖ Fonts loaded successfully"
              : "‚ö†Ô∏è Max attempts reached, proceeding anyway"
          );
          setFontsLoaded(true);
          setFontLoadAttempts(attempt);

          // ‡∏£‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå render
          await new Promise((resolve) => setTimeout(resolve, 500));
        } else if (attempt < 3) {
          // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          console.log(
            `‚ùå Font not loaded, retrying in 1 second... (attempt ${attempt}/3)`
          );
          setTimeout(() => loadFontsWithRetry(attempt + 1), 1000);
        }
      } catch (error) {
        console.error(`üí• Font loading error (attempt ${attempt}):`, error);
        if (attempt < 3) {
          setTimeout(() => loadFontsWithRetry(attempt + 1), 1000);
        } else {
          console.warn(
            "‚ö†Ô∏è Font loading failed after 3 attempts, proceeding anyway"
          );
          setFontsLoaded(true);
          setFontLoadAttempts(attempt);
        }
      }
    };

    loadFontsWithRetry();
  }, []);

  /**
   * ‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå
   */
  const capture = async (filename = "captured-image", captureOptions = {}) => {
    if (!captureRef.current) {
      showError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û");
      return null;
    }

    if (!fontsLoaded) {
      console.warn("‚ö†Ô∏è Fonts not fully loaded, but proceeding with capture");
      showInfo("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ü‡∏≠‡∏ô‡∏ï‡πå... ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà");

      // ‡∏£‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î
      await new Promise((resolve) => setTimeout(resolve, 1000));
    }

    setIsCapturing(true);
    showInfo("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...");

    try {
      const combinedOptions = {
        ...options,
        ...captureOptions,
        fontFamily: "Kanit",
      };

      await captureToImage(captureRef.current, filename, combinedOptions);
      showSuccess("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

      const result = { success: true, type: "image", filename };
      setLastCaptureResult(result);
      return result;
    } catch (error) {
      const result = { success: false, type: "image", error };
      setLastCaptureResult(result);
      showError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${error.message}`);
      return result;
    } finally {
      setIsCapturing(false);
    }
  };

  /**
   * ‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î
   */
  const copyToClipboard = async (captureOptions = {}) => {
    if (!captureRef.current) {
      showError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û");
      return null;
    }

    if (!fontsLoaded) {
      console.warn("‚ö†Ô∏è Fonts not fully loaded, but proceeding with capture");
      showInfo("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ü‡∏≠‡∏ô‡∏ï‡πå... ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà");

      // ‡∏£‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î
      await new Promise((resolve) => setTimeout(resolve, 1000));
    }

    setIsCapturing(true);
    showInfo("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...");

    try {
      const combinedOptions = {
        ...options,
        ...captureOptions,
        fontFamily: "Kanit",
      };

      await captureToClipboard(captureRef.current, combinedOptions);
      showSuccess("‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏•‡πâ‡∏ß");

      const result = { success: true, type: "clipboard" };
      setLastCaptureResult(result);
      return result;
    } catch (error) {
      const result = { success: false, type: "clipboard", error };
      setLastCaptureResult(result);
      showError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${error.message}`);
      return result;
    } finally {
      setIsCapturing(false);
    }
  };

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
   */
  const createPreview = async (captureOptions = {}) => {
    if (!captureRef.current) {
      showError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û");
      return null;
    }

    if (!fontsLoaded) {
      console.warn("‚ö†Ô∏è Fonts not fully loaded, but proceeding with preview");
      await new Promise((resolve) => setTimeout(resolve, 500));
    }

    setIsCapturing(true);

    try {
      const combinedOptions = {
        ...options,
        ...captureOptions,
        fontFamily: "Kanit",
      };

      const dataUrl = await captureToDataURL(
        captureRef.current,
        combinedOptions
      );
      setPreviewUrl(dataUrl);

      const result = { success: true, type: "preview", dataUrl };
      setLastCaptureResult(result);
      return result;
    } catch (error) {
      const result = { success: false, type: "preview", error };
      setLastCaptureResult(result);
      showError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ${error.message}`);
      return result;
    } finally {
      setIsCapturing(false);
    }
  };

  /**
   * ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
   */
  const clearPreview = () => {
    setPreviewUrl(null);
  };

  /**
   * ‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
   */
  const print = () => {
    window.print();
    return { success: true, type: "print" };
  };

  /**
   * ‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
   */
  const captureAdvanced = async (advancedOptions = {}) => {
    if (!captureRef.current) {
      showError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏õ‡∏†‡∏≤‡∏û");
      return null;
    }

    if (!fontsLoaded) {
      console.warn("‚ö†Ô∏è Fonts not fully loaded, waiting a bit more...");
      showInfo("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ü‡∏≠‡∏ô‡∏ï‡πå... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà");
      await new Promise((resolve) => setTimeout(resolve, 1500));
    }

    setIsCapturing(true);
    showInfo("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...");

    try {
      const combinedOptions = {
        ...options,
        ...advancedOptions,
        fontFamily: "Kanit",
      };

      const result = await captureWithOptions(
        captureRef.current,
        combinedOptions
      );

      if (combinedOptions.saveAs) {
        showSuccess("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }

      if (combinedOptions.copyToClipboard) {
        showSuccess("‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏•‡πâ‡∏ß");
      }

      if (combinedOptions.preview) {
        setPreviewUrl(result.dataURL);
      }

      setLastCaptureResult({ success: true, type: "advanced", ...result });
      return { success: true, ...result };
    } catch (error) {
      const errorResult = { success: false, type: "advanced", error };
      setLastCaptureResult(errorResult);
      showError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
      return errorResult;
    } finally {
      setIsCapturing(false);
    }
  };

  return {
    captureRef,
    isCapturing,
    previewUrl,
    lastCaptureResult,
    fontsLoaded,
    fontLoadAttempts, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
    capture,
    copyToClipboard,
    createPreview,
    clearPreview,
    print,
    captureAdvanced,
  };
};

export default useCapture;
